from aiogram import types
import sqlite3

from aiogram.types import ParseMode

from loader import dp
from keyboards.inline.MAIN_MENU_KB import MAIN_MENU_KB


async def writeUserDataToDb(userid):
    conn = sqlite3.connect("dataBase.db")
    cursor = conn.cursor()
    count = cursor.execute(f"SELECT COUNT(*) FROM bot_users WHERE tgId = {userid}").fetchone()[0]
    if count == 0:
        cursor.execute(f"INSERT INTO bot_users (tgId, balance) VALUES ({userid}, 0)")
        conn.commit()
        conn.close()


@dp.message_handler(state='*', commands=['start'])
async def mainMenuMessage(message: types.Message):
    await message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
                         f"–Ø ‚Äì –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.\n"
                         f"‚¨áÔ∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.", reply_markup=MAIN_MENU_KB)
    await writeUserDataToDb(message.from_user.id)


@dp.message_handler(state='*', commands=['getid'])
async def getId(message: types.Message):
    await message.answer(f"–í–∞—à id: <code>{message.from_user.id}</code>", parse_mode=ParseMode.HTML)


@dp.callback_query_handler(state='*', text='mainMenu')
async def mainMenuCallback(call: types.CallbackQuery):
    await call.message.edit_text(f"üëã–ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}!\n\n"
                                 f"–Ø ‚Äì –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.\n"
                                 f"‚¨áÔ∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
    await call.message.edit_reply_markup(reply_markup=MAIN_MENU_KB)
    await call.answer()


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                         "/help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
                         "/getid ‚Äî —É–∑–Ω–∞—Ç—å id Telegram")
